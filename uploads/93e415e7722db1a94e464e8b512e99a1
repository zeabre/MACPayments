// server.js

    // set up ========================
    
    var express  					= require('express');
    var app      						= express();                               // create our app w/ express
    var path 						= require('path');
    var mongoose 				= require('mongoose'), Schema = mongoose.Schema;                     // mongoose for mongodb
    var morgan 					= require('morgan');             // log requests to the console (express4)
    var bodyParser 				= require('body-parser');    // pull information from HTML POST (express4)
    var methodOverride 		= require('method-override'); // simulate DELETE and PUT (express4)
	var scheduler 				= require('node-schedule');
	var multer 						= require('multer');
	var moment					= require('moment');
	var xmlify 						= require('xmlify');
	var convert 					= require('xml-js');
    var CryptoJS 					= require("crypto-js");
	
	
    var crypto				= require('crypto');
    var jwt					= require('jsonwebtoken');
	var expressJwt 			= require('express-jwt');
    var _ 					= require('lodash'); 
	var passport			= require('passport');
	var LocalStrategy		= require('passport-local').Strategy;
    var Q					= require('q'); 
	var cookieParser 		= require('cookie-parser');
	var passportLocaLMongoose=require('passport-local-mongoose');
	var expressSession		= require('express-session');
	var router				= express.Router();
	var Promise				= require("bluebird");
	
	
	
	var dateObj = new Date();
	var sYear = dateObj.getUTCFullYear();
	var sMonth = dateObj.getUTCMonth() + 1;
	var sDate = new Date(sYear,sMonth-1,1);
	var eDate = new Date(sYear,sMonth,1);
	console.log(dateObj);
	console.log("Year: " + sYear + " Month: " + sMonth + "...");
	console.log("sDate: " + sDate + "...");
	console.log("eDate: " + eDate + "..."); 
	

  
    // configuration =================

    mongoose.connect('mongodb://localhost:27017/MFI',{useNewUrlParser: true, useUnifiedTopology: true});     // connect to mongoDB database
    
    // Email sending
    

		

    
	app.use(morgan('dev'));                                         // log every request to the console
    app.use(cookieParser());
    app.use(bodyParser.urlencoded({'extended':'false'}));            // parse application/x-www-form-urlencoded
    app.use(bodyParser.json());                                     // parse application/json
    app.use(bodyParser.json({ type: 'application/vnd.api+json' })); // parse application/vnd.api+json as json
    app.use(methodOverride());

	//-------------------
	
	 	app.use(expressSession({ secret: 'gawie', resave: false, saveUninitialized: false }));	
		app.use(passport.initialize());
		app.use(passport.session());
		app.use(express.static(__dirname + '/public'));                 // set the static files location /public/img will be /img for users
		
		
		
		var PatientSchema = new Schema(
			{
				pt_fname: String,
				pt_sname: String,
				pt_medaid_name: String,
				pt_medaid_num: String,
			
		});
		var Patient = mongoose.model('Patient',PatientSchema);	
		
		var LogSchema = new Schema(
			{
				code: Number,
				desc: String,

			
		});
		var Log = mongoose.model('Log',LogSchema);	
				
		var MFISchema = new Schema(
			{
				pt_ID: String,
				service_code: String,
				appt_date:  { type: Date, default: Date.now },
				PatientDetails: [PatientSchema],
		});
		var MFI = mongoose.model('MFI',MFISchema);
			
  
	var LogTransaction = function(LT_code,LT_desc) {
		console.log("Logging transaction code: " + LT_code);
		
		Log.create({
			code 	: LT_code,
			desc	: LT_desc

			},function (err, log) {
				if (err) {
					console.log("Logging error : " + err);
					return err;
				}
			});
	};		
	
	app.get('/', function(req,res) {

		res.render('index');

	});
	

		
	//-------------------
		

	app.use(function(req,res,next){
		res.header('Cache-Control', 'no-cache, no-store, must-revalidate');
		res.header('Access-Control-Allow-Origin', '*'); // We can access from anywhere
		res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
		res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept');
		res.header('Content-Type', 'application/json;charset=utf-8');
		next();
	});
	

   
   app.post('/api/mfi', function(req, res, next) {
	   
		//console.log(req.body.cipher);
		
		var bytes  = CryptoJS.AES.decrypt(req.body.cipher, 'gawie');
		var decryptedData = JSON.parse(bytes.toString(CryptoJS.enc.Utf8));
		var inter2 = JSON.stringify(decryptedData, null, 2);
 
		console.log("Decrypted: " + inter2);
		
		MFI.insertMany(decryptedData, function (err, result) {
			
			  if (err) 	
			  {
					//console.log(err);
					LogTransaction(500,'MFI insert fail');
					
					
					return res.status(500).json({status: 'MFI insert fail'});
				}
			  else
			  {
					//console.log(result)
					LogTransaction(200,result);
					
					var ciphertext = CryptoJS.AES.encrypt(JSON.stringify(result), 'gawie').toString();					 _
					return res.status(200).send(ciphertext);				 
					
			  }

		  });
	
      
	});
   
   	app.get('/api/mfi',function(req,res, next) {
		console.log('In GET for MFI');
		return res.status(200).json({status: 'MFI successful'});
	});	

    // listen (start app with node server.js) ======================================
    app.listen(3200);
    console.log(app.settings );
    console.log("MFI listening on port 3200");
